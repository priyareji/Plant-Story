const placeOrder = async (req, res) => {
  try {
    console.log("entered placed order routeeeee");
    let userId = req.session.user_id;
    let orderDetails = req.body;
    console.log(orderDetails, "ordeerdetails have reached here");

    let productsOrdered = await productHepler.getProductListForOrders(userId);
    console.log(productsOrdered, "products that are ordered");

    if (productsOrdered) {
      let totalOrderValue = await productHepler.getCartValue(userId);
      console.log(totalOrderValue, "this is the total order value");
      ///============coupon discounts=====/
      const availableCouponData = await couponHelper.checkCouponValidityStatus(
        userId,
        totalOrderValue
      );
      let couponDiscountAmount = 0;
      if (availableCouponData.status) {
        const couponDiscountAmount = availableCouponData.couponDiscount;
        orderDetails.couponDiscount = couponDiscountAmount;
        console.log(couponDiscountAmount, "coupon dis amt");

        totalOrderValue = totalOrderValue - couponDiscountAmount;
        console.log(totalOrderValue, "total order value");
        const updateCouponUsedStatus =
          await couponHelper.updateCouponUsedStatus(
            userId,
            availableCouponData.couponId
          );
      }

      productHepler
        .placingOrder(userId, orderDetails, productsOrdered, totalOrderValue)
        .then(async (orderId) => {
          console.log("successfully reached hereeeeeeeeee");

          if (req.body["paymentMethod"] === "COD") {
            console.log("cod_is true here");
            res.json({ COD_CHECKOUT: true });
          } else if (req.body["paymentMethod"] === "ONLINE") {
            productHepler
              .generateRazorpayOrder(orderId, totalOrderValue)
              .then(async (razorpayOrderDetails) => {
                console.log(
                  razorpayOrderDetails,
                  "razorpayOrderDetails reached here"
                );
                const user = await User.findById({ _id: userId }).lean();
                res.json({
                  ONLINE_CHECKOUT: true,
                  userDetails: user,
                  userOrderRequestData: orderDetails,
                  orderDetails: razorpayOrderDetails,
                  razorpayKeyId: "rzp_test_bfnSH6XKHJdHG9",
                });
              });
          }
          // else if (req.body["paymentMethod"] === "WALLET") {
          //   console.log("wallet true");
          //   const walletBalance = await userhelper.walletBalance(userId);
          //   console.log(walletBalance, "wallet balance is this");
          //   if (walletBalance >= totalOrderValue) {
          //     productHepler
          //       .placingOrder(
          //         userId,
          //         orderDetails,
          //         productsOrdered,
          //         totalOrderValue
          //       )
          //       .then(async (orderId, error) => {
          //         res.json({ WALLET_CHECKOUT: true, orderId });
          //       });
          //   } else {
          //     res.json({ error: "Insufficient balance." });
          //   }
          // }
          else {
            res.json({ paymentStatus: false });
          }
        });
    } else {
      res.json({ checkoutStatus: false });
    }
  } catch (error) {
    console.log(error.message);
    res.redirect("/error");
  }
};
